import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
    id 'application'
    // use for javafx support
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'checkstyle'
    id 'jacoco'
    id "com.github.spotbugs" version "4.7.8"
}

task startServer(type: JavaExec){
    classpath = sourceSets.main.runtimeClasspath;
    mainClass.set("server.Main")
}

task startConsoleClient(type: JavaExec){
    standardInput = System.in
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set("client.console.Main")
}

sourceCompatibility = 11
targetCompatibility = 11

def mainClassName = "client.javafx.Main"
//def mainClassName = "client.console.Main"

application {
    mainClass.set(mainClassName)
}

run {
    standardInput = System.in
    systemProperty "file.encoding", "utf-8"
}

group 'edv.memmel'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    //implementation files('libs/some_local_library_jar_file.jar')
}

// Use for JavaFX project:
javafx {
    version = '17'
    modules = ['javafx.controls', 'javafx.fxml']
}

reporting.baseDir = "test-reports"

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

checkstyle {
    toolVersion '8.43'
    maxWarnings = 0
}

spotbugsMain {
    reports {
        html {
            enabled = true
        }
        xml {
            enabled = false
        }
    }
}

jacocoTestReport {
    reports {
        html.destination file("test-reports/jacoco")
        xml.enabled false
        csv.enabled false
    }
    dependsOn test // always run tests before generating new report
    finalizedBy jacocoTestCoverageVerification
    // always check coverage after generating report
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = "BRANCH"
                value = "COVEREDRATIO"
                // TODO change to whatever your minimum branch coverage should be
                minimum = 0.0
            }
        }
        rule {
            limit {
                counter = "INSTRUCTION"
                value = "MISSEDRATIO"
                // TODO change to whatever missed ratio you find acceptable
                maximum = 1.0
            }
        }
    }
}

javadoc {
    source = sourceSets.main.allJava
    destinationDir = file("doc/")
}

task javaFxJar(type: Jar) {
    dependsOn compileJava
    //destinationDirectory = file("${rootDir}/releases")
    OperatingSystem operatingSystem = DefaultNativePlatform.currentOperatingSystem;
    if (operatingSystem.isWindows()) {
        archiveBaseName = "example-win"
    } else if (operatingSystem.isMacOsX()) {
        archiveBaseName = "example-osx"
    } else if (operatingSystem.isLinux()) {
        archiveBaseName = "example-linux"
    } else {
        archiveBaseName = "example"
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from(sourceSets.main.output) {
        include "**"
        //exclude "**/TestServerClients.class"
        //exclude "**/client/Client.class"
        //exclude "**/view/*"
    }

    manifest {
        // a non-javafx main class is needed for jars
        attributes 'Main-Class': mainClassName
    }
}